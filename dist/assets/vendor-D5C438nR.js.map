{"version":3,"file":"vendor-D5C438nR.js","sources":["../../node_modules/@solflare-wallet/metamask-sdk/lib/esm/utils.js","../../node_modules/@solflare-wallet/metamask-sdk/lib/esm/detectProvider.js","../../node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/solana.js","../../node_modules/@solflare-wallet/metamask-sdk/lib/esm/standard/account.js","../../node_modules/@solflare-wallet/metamask-sdk/lib/esm/index.js"],"sourcesContent":["export function isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nexport function serializeTransaction(transaction) {\n    return isLegacyTransactionInstance(transaction)\n        ? transaction.serialize({\n            verifySignatures: false,\n            requireAllSignatures: false\n        })\n        : transaction.serialize();\n}\nexport function serializeTransactionMessage(transaction) {\n    return isLegacyTransactionInstance(transaction)\n        ? transaction.serializeMessage()\n        : transaction.message.serialize();\n}\nexport function addSignature(transaction, publicKey, signature) {\n    if (isLegacyTransactionInstance(transaction)) {\n        transaction.addSignature(publicKey, Buffer.from(signature));\n    }\n    else {\n        const signerPubkeys = transaction.message.staticAccountKeys.slice(0, transaction.message.header.numRequiredSignatures);\n        const signerIndex = signerPubkeys.findIndex((pubkey) => pubkey.equals(publicKey));\n        if (signerIndex >= 0) {\n            transaction.signatures[signerIndex] = signature;\n        }\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function isSnapSupported(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield provider.request({ method: 'wallet_getSnaps' });\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    });\n}\nexport function detectProvider() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const provider = window.ethereum;\n            if (!provider) {\n                return null;\n            }\n            if (provider.providers && Array.isArray(provider.providers)) {\n                const providers = provider.providers;\n                for (const provider of providers) {\n                    if (yield isSnapSupported(provider)) {\n                        return provider;\n                    }\n                }\n            }\n            if (provider.detected && Array.isArray(provider.detected)) {\n                const providers = provider.detected;\n                for (const provider of providers) {\n                    if (yield isSnapSupported(provider)) {\n                        return provider;\n                    }\n                }\n            }\n            if (yield isSnapSupported(provider)) {\n                return provider;\n            }\n            return null;\n        }\n        catch (error) {\n            console.error(error);\n            return null;\n        }\n    });\n}\n","// This is copied from @solana/wallet-standard-chains\n/** Solana Mainnet (beta) cluster, e.g. https://api.mainnet-beta.solana.com */\nexport const SOLANA_MAINNET_CHAIN = 'solana:mainnet';\n/** Solana Devnet cluster, e.g. https://api.devnet.solana.com */\nexport const SOLANA_DEVNET_CHAIN = 'solana:devnet';\n/** Solana Testnet cluster, e.g. https://api.testnet.solana.com */\nexport const SOLANA_TESTNET_CHAIN = 'solana:testnet';\n/** Solana Localnet cluster, e.g. http://localhost:8899 */\nexport const SOLANA_LOCALNET_CHAIN = 'solana:localnet';\n/** Array of all Solana clusters */\nexport const SOLANA_CHAINS = [\n    SOLANA_MAINNET_CHAIN,\n    SOLANA_DEVNET_CHAIN,\n    SOLANA_TESTNET_CHAIN,\n    SOLANA_LOCALNET_CHAIN\n];\n/**\n * Check if a chain corresponds with one of the Solana clusters.\n */\nexport function isSolanaChain(chain) {\n    return SOLANA_CHAINS.includes(chain);\n}\n","// This is copied with modification from @wallet-standard/wallet\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _StandardSolflareMetaMaskWalletAccount_address, _StandardSolflareMetaMaskWalletAccount_publicKey, _StandardSolflareMetaMaskWalletAccount_chains, _StandardSolflareMetaMaskWalletAccount_features, _StandardSolflareMetaMaskWalletAccount_label, _StandardSolflareMetaMaskWalletAccount_icon;\nimport { SolanaSignAndSendTransaction, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { SOLANA_CHAINS } from './solana.js';\nconst chains = SOLANA_CHAINS;\nconst features = [SolanaSignAndSendTransaction, SolanaSignTransaction, SolanaSignMessage];\nexport class StandardSolflareMetaMaskWalletAccount {\n    get address() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_address, \"f\");\n    }\n    get publicKey() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, \"f\").slice();\n    }\n    get chains() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_chains, \"f\").slice();\n    }\n    get features() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_features, \"f\").slice();\n    }\n    get label() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_label, \"f\");\n    }\n    get icon() {\n        return __classPrivateFieldGet(this, _StandardSolflareMetaMaskWalletAccount_icon, \"f\");\n    }\n    constructor({ address, publicKey, label, icon }) {\n        _StandardSolflareMetaMaskWalletAccount_address.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_publicKey.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_chains.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_features.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_label.set(this, void 0);\n        _StandardSolflareMetaMaskWalletAccount_icon.set(this, void 0);\n        if (new.target === StandardSolflareMetaMaskWalletAccount) {\n            Object.freeze(this);\n        }\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_address, address, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_publicKey, publicKey, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_chains, chains, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_features, features, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_label, label, \"f\");\n        __classPrivateFieldSet(this, _StandardSolflareMetaMaskWalletAccount_icon, icon, \"f\");\n    }\n}\n_StandardSolflareMetaMaskWalletAccount_address = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_publicKey = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_chains = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_features = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_label = new WeakMap(), _StandardSolflareMetaMaskWalletAccount_icon = new WeakMap();\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\nimport bs58 from 'bs58';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isLegacyTransactionInstance, serializeTransaction } from './utils';\nimport { detectProvider } from './detectProvider';\nimport { StandardSolflareMetaMaskWalletAccount } from './standard/account';\nimport { isSolanaChain } from './standard/solana';\nexport * from './types';\nexport * from './standard/account';\nclass SolflareMetaMask extends EventEmitter {\n    constructor(config) {\n        super();\n        this._network = 'mainnet-beta';\n        this._iframeParams = {};\n        this._element = null;\n        this._iframe = null;\n        this._publicKey = null;\n        this._account = null;\n        this._isConnected = false;\n        this._connectHandler = null;\n        this._messageHandlers = {};\n        this._handleEvent = (event) => {\n            var _a, _b;\n            switch (event.type) {\n                case 'connect': {\n                    this._collapseIframe();\n                    if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.publicKey) {\n                        this._publicKey = event.data.publicKey;\n                        this._isConnected = true;\n                        if (this._connectHandler) {\n                            this._connectHandler.resolve();\n                            this._connectHandler = null;\n                        }\n                        this._connected();\n                    }\n                    else {\n                        if (this._connectHandler) {\n                            this._connectHandler.reject();\n                            this._connectHandler = null;\n                        }\n                        this._disconnected();\n                    }\n                    return;\n                }\n                case 'disconnect': {\n                    if (this._connectHandler) {\n                        this._connectHandler.reject();\n                        this._connectHandler = null;\n                    }\n                    this._disconnected();\n                    return;\n                }\n                case 'accountChanged': {\n                    if ((_b = event.data) === null || _b === void 0 ? void 0 : _b.publicKey) {\n                        this._publicKey = event.data.publicKey;\n                        this.emit('accountChanged', this.publicKey);\n                        this._standardConnected();\n                    }\n                    else {\n                        this.emit('accountChanged', undefined);\n                        this._standardDisconnected();\n                    }\n                    return;\n                }\n                default: {\n                    return;\n                }\n            }\n        };\n        this._handleResize = (data) => {\n            if (data.resizeMode === 'full') {\n                if (data.params.mode === 'fullscreen') {\n                    this._expandIframe();\n                }\n                else if (data.params.mode === 'hide') {\n                    this._collapseIframe();\n                }\n            }\n            else if (data.resizeMode === 'coordinates') {\n                this._resizeIframe(data.params);\n            }\n        };\n        this._handleMessage = (event) => {\n            var _a;\n            if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.channel) !== 'solflareIframeToWalletAdapter') {\n                return;\n            }\n            const data = event.data.data || {};\n            if (data.type === 'event') {\n                this._handleEvent(data.event);\n            }\n            else if (data.type === 'resize') {\n                this._handleResize(data);\n            }\n            else if (data.type === 'response') {\n                if (this._messageHandlers[data.id]) {\n                    const { resolve, reject } = this._messageHandlers[data.id];\n                    delete this._messageHandlers[data.id];\n                    if (data.error) {\n                        reject(data.error);\n                    }\n                    else {\n                        resolve(data.result);\n                    }\n                }\n            }\n        };\n        this._removeElement = () => {\n            if (this._element) {\n                this._element.remove();\n                this._element = null;\n            }\n        };\n        this._removeDanglingElements = () => {\n            const elements = document.getElementsByClassName('solflare-metamask-wallet-adapter-iframe');\n            for (const element of elements) {\n                if (element.parentElement) {\n                    element.remove();\n                }\n            }\n        };\n        this._injectElement = () => {\n            this._removeElement();\n            this._removeDanglingElements();\n            const params = Object.assign(Object.assign({}, this._iframeParams), { mm: true, v: 1, cluster: this._network || 'mainnet-beta', origin: window.location.origin || '', title: document.title || '' });\n            const queryString = Object.keys(params)\n                .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n                .join('&');\n            const iframeUrl = `${SolflareMetaMask.IFRAME_URL}?${queryString}`;\n            this._element = document.createElement('div');\n            this._element.className = 'solflare-metamask-wallet-adapter-iframe';\n            this._element.innerHTML = `\n      <iframe src='${iframeUrl}' style='position: fixed; top: 0; bottom: 0; left: 0; right: 0; width: 100%; height: 100%; border: none; border-radius: 0; z-index: 99999; color-scheme: auto;' allowtransparency='true'></iframe>\n    `;\n            document.body.appendChild(this._element);\n            this._iframe = this._element.querySelector('iframe');\n            window.addEventListener('message', this._handleMessage, false);\n        };\n        this._collapseIframe = () => {\n            if (this._iframe) {\n                this._iframe.style.top = '';\n                this._iframe.style.right = '';\n                this._iframe.style.height = '2px';\n                this._iframe.style.width = '2px';\n            }\n        };\n        this._expandIframe = () => {\n            if (this._iframe) {\n                this._iframe.style.top = '0px';\n                this._iframe.style.bottom = '0px';\n                this._iframe.style.left = '0px';\n                this._iframe.style.right = '0px';\n                this._iframe.style.width = '100%';\n                this._iframe.style.height = '100%';\n            }\n        };\n        this._resizeIframe = (params) => {\n            if (!this._iframe) {\n                return;\n            }\n            this._iframe.style.top = isFinite(params.top) ? `${params.top}px` : '';\n            this._iframe.style.bottom = isFinite(params.bottom) ? `${params.bottom}px` : '';\n            this._iframe.style.left = isFinite(params.left) ? `${params.left}px` : '';\n            this._iframe.style.right = isFinite(params.right) ? `${params.right}px` : '';\n            this._iframe.style.width = isFinite(params.width)\n                ? `${params.width}px`\n                : params.width;\n            this._iframe.style.height = isFinite(params.height)\n                ? `${params.height}px`\n                : params.height;\n        };\n        this._sendIframeMessage = (data) => {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            return new Promise((resolve, reject) => {\n                var _a, _b;\n                const messageId = uuidv4();\n                this._messageHandlers[messageId] = { resolve, reject };\n                (_b = (_a = this._iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({\n                    channel: 'solflareWalletAdapterToIframe',\n                    data: Object.assign({ id: messageId }, data)\n                }, '*');\n            });\n        };\n        this._connected = () => {\n            this._isConnected = true;\n            this.emit('connect', this.publicKey);\n            this._standardConnected();\n        };\n        this._disconnected = () => {\n            this._publicKey = null;\n            this._isConnected = false;\n            window.removeEventListener('message', this._handleMessage, false);\n            this._removeElement();\n            this.emit('disconnect');\n            this._standardDisconnected();\n        };\n        this._standardConnected = () => {\n            if (!this.publicKey) {\n                return;\n            }\n            const address = this.publicKey.toString();\n            if (!this._account || this._account.address !== address) {\n                this._account = new StandardSolflareMetaMaskWalletAccount({\n                    address,\n                    publicKey: this.publicKey.toBytes()\n                });\n                this.emit('standard_change', { accounts: this.standardAccounts });\n            }\n        };\n        this._standardDisconnected = () => {\n            if (this._account) {\n                this._account = null;\n                this.emit('standard_change', { accounts: this.standardAccounts });\n            }\n        };\n        if (config === null || config === void 0 ? void 0 : config.network) {\n            this._network = config === null || config === void 0 ? void 0 : config.network;\n        }\n        if (window.SolflareMetaMaskParams) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), window.SolflareMetaMaskParams);\n        }\n        if (config === null || config === void 0 ? void 0 : config.params) {\n            this._iframeParams = Object.assign(Object.assign({}, this._iframeParams), config === null || config === void 0 ? void 0 : config.params);\n        }\n    }\n    get publicKey() {\n        return this._publicKey ? new PublicKey(this._publicKey) : null;\n    }\n    get standardAccount() {\n        return this._account;\n    }\n    get standardAccounts() {\n        return this._account ? [this._account] : [];\n    }\n    get isConnected() {\n        return this._isConnected;\n    }\n    get connected() {\n        return this.isConnected;\n    }\n    get autoApprove() {\n        return false;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                return;\n            }\n            this._injectElement();\n            yield new Promise((resolve, reject) => {\n                this._connectHandler = { resolve, reject };\n            });\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._sendIframeMessage({\n                method: 'disconnect'\n            });\n            this._disconnected();\n        });\n    }\n    signTransaction(transaction) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransaction = serializeTransaction(transaction);\n                const response = yield this._sendIframeMessage({\n                    method: 'signTransactionV2',\n                    params: {\n                        transaction: bs58.encode(serializedTransaction)\n                    }\n                });\n                const { transaction: signedTransaction } = response;\n                return isLegacyTransactionInstance(transaction) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transaction');\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransactions = transactions.map((transaction) => serializeTransaction(transaction));\n                const { transactions: signedTransactions } = yield this._sendIframeMessage({\n                    method: 'signAllTransactionsV2',\n                    params: {\n                        transactions: serializedTransactions.map((transaction) => bs58.encode(transaction))\n                    }\n                });\n                return signedTransactions.map((signedTransaction, index) => {\n                    return isLegacyTransactionInstance(transactions[index]) ? Transaction.from(bs58.decode(signedTransaction)) : VersionedTransaction.deserialize(bs58.decode(signedTransaction));\n                });\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign transactions');\n            }\n        });\n    }\n    signAndSendTransaction(transaction, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const serializedTransaction = serializeTransaction(transaction);\n                const { signature } = yield this._sendIframeMessage({\n                    method: 'signAndSendTransaction',\n                    params: {\n                        transaction: bs58.encode(serializedTransaction),\n                        options\n                    }\n                });\n                return signature;\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign and send transaction');\n            }\n        });\n    }\n    signMessage(data, display = 'utf8') {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected || !this.publicKey) {\n                throw new Error('Wallet not connected');\n            }\n            try {\n                const { signature } = yield this._sendIframeMessage({\n                    method: 'signMessage',\n                    params: {\n                        data: bs58.encode(data),\n                        display\n                    }\n                });\n                return Uint8Array.from(bs58.decode(signature));\n            }\n            catch (e) {\n                throw new Error(((_a = e === null || e === void 0 ? void 0 : e.toString) === null || _a === void 0 ? void 0 : _a.call(e)) || 'Failed to sign message');\n            }\n        });\n    }\n    sign(data, display = 'utf8') {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.signMessage(data, display);\n        });\n    }\n    static isSupported() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = yield detectProvider();\n            return !!provider;\n        });\n    }\n    standardSignAndSendTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain, options } = inputs[0];\n                const { minContextSlot, preflightCommitment, skipPreflight, maxRetries } = options || {};\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                if (!isSolanaChain(chain))\n                    throw new Error('invalid chain');\n                const signature = yield this.signAndSendTransaction(VersionedTransaction.deserialize(transaction), {\n                    preflightCommitment,\n                    minContextSlot,\n                    maxRetries,\n                    skipPreflight\n                });\n                outputs.push({ signature: bs58.decode(signature) });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    outputs.push(...(yield this.standardSignAndSendTransaction(input)));\n                }\n            }\n            return outputs;\n        });\n    }\n    standardSignTransaction(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { transaction, account, chain } = inputs[0];\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                if (chain && !isSolanaChain(chain))\n                    throw new Error('invalid chain');\n                const signedTransaction = yield this.signTransaction(VersionedTransaction.deserialize(transaction));\n                outputs.push({ signedTransaction: signedTransaction.serialize() });\n            }\n            else if (inputs.length > 1) {\n                let chain;\n                for (const input of inputs) {\n                    if (input.account !== this._account)\n                        throw new Error('invalid account');\n                    if (input.chain) {\n                        if (!isSolanaChain(input.chain))\n                            throw new Error('invalid chain');\n                        if (chain) {\n                            if (input.chain !== chain)\n                                throw new Error('conflicting chain');\n                        }\n                        else {\n                            chain = input.chain;\n                        }\n                    }\n                }\n                const transactions = inputs.map(({ transaction }) => VersionedTransaction.deserialize(transaction));\n                const signedTransactions = yield this.signAllTransactions(transactions);\n                outputs.push(...signedTransactions.map((signedTransaction) => ({\n                    signedTransaction: signedTransaction.serialize()\n                })));\n            }\n            return outputs;\n        });\n    }\n    standardSignMessage(...inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.connected)\n                throw new Error('not connected');\n            const outputs = [];\n            if (inputs.length === 1) {\n                const { message, account } = inputs[0];\n                if (account !== this._account)\n                    throw new Error('invalid account');\n                const signature = yield this.signMessage(message);\n                outputs.push({ signedMessage: message, signature });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    outputs.push(...(yield this.standardSignMessage(input)));\n                }\n            }\n            return outputs;\n        });\n    }\n}\nSolflareMetaMask.IFRAME_URL = 'https://widget.solflare.com/';\nexport default SolflareMetaMask;\n"],"names":["isLegacyTransactionInstance","transaction","version","serializeTransaction","serialize","verifySignatures","requireAllSignatures","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","adopt","then","apply","isSnapSupported","provider","this","request","method","error","SOLANA_CHAINS","isSolanaChain","chain","includes","_StandardSolflareMetaMaskWalletAccount_address","_StandardSolflareMetaMaskWalletAccount_publicKey","_StandardSolflareMetaMaskWalletAccount_chains","_StandardSolflareMetaMaskWalletAccount_features","_StandardSolflareMetaMaskWalletAccount_label","_StandardSolflareMetaMaskWalletAccount_icon","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","get","__classPrivateFieldSet","set","chains","features","SolanaSignAndSendTransaction","SolanaSignTransaction","SolanaSignMessage","StandardSolflareMetaMaskWalletAccount","address","publicKey","slice","label","icon","constructor","Object","freeze","WeakMap","SolflareMetaMask","EventEmitter","config","super","_network","_iframeParams","_element","_iframe","_publicKey","_account","_isConnected","_connectHandler","_messageHandlers","_handleEvent","event","_a","_b","type","_collapseIframe","data","_connected","_disconnected","emit","_standardConnected","_standardDisconnected","_handleResize","resizeMode","params","mode","_expandIframe","_resizeIframe","_handleMessage","channel","id","_removeElement","remove","_removeDanglingElements","elements","document","getElementsByClassName","element","parentElement","_injectElement","assign","mm","v","cluster","origin","window","location","title","queryString","keys","map","key","encodeURIComponent","join","iframeUrl","IFRAME_URL","createElement","className","innerHTML","body","appendChild","querySelector","addEventListener","style","top","right","height","width","bottom","left","isFinite","_sendIframeMessage","connected","Error","messageId","uuidv4","contentWindow","postMessage","removeEventListener","toString","toBytes","accounts","standardAccounts","network","SolflareMetaMaskParams","PublicKey","standardAccount","isConnected","autoApprove","connect","disconnect","signTransaction","serializedTransaction","response","bs58","encode","signedTransaction","Transaction","from","decode","VersionedTransaction","deserialize","signAllTransactions","transactions","serializedTransactions","signedTransactions","index","signAndSendTransaction","options","signature","signMessage","display","Uint8Array","sign","isSupported","ethereum","providers","Array","isArray","detected","console","detectProvider","standardSignAndSendTransaction","inputs","outputs","length","account","minContextSlot","preflightCommitment","skipPreflight","maxRetries","push","input","standardSignTransaction","standardSignMessage","message","signedMessage"],"mappings":"sIAAO,SAASA,EAA4BC,GACxC,YAA+B,IAAxBA,EAAYC,OACvB,CACO,SAASC,EAAqBF,GACjC,OAAOD,EAA4BC,GAC7BA,EAAYG,UAAU,CACpBC,kBAAkB,EAClBC,sBAAsB,IAExBL,EAAYG,WACtB,CCVA,IAAIG,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,OAASG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,OAASG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAJzD,SAAeA,GAAS,OAAOA,aAAiBN,EAAIM,EAAQ,IAAIN,EAAE,SAAUG,GAAWA,EAAQG,EAAQ,EAAI,CAIzCO,CAAMF,EAAOL,OAAOQ,KAAKT,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUc,MAAMjB,EAASC,GAAc,KAAKS,OAClE,EACJ,EACO,SAASQ,EAAgBC,GAC5B,OAAOpB,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAEI,aADMD,EAASE,QAAQ,CAAEC,OAAQ,qBAC1B,CACX,OACOC,GACH,OAAO,CACX,CACJ,EACJ,CCjBO,MAQMC,EAAgB,CARO,iBAED,gBAEC,iBAEC,mBAW9B,SAASC,EAAcC,GAC1B,OAAOF,EAAcG,SAASD,EAClC,CCpBA,IAWIE,EAAgDC,EAAkDC,EAA+CC,EAAiDC,EAA8CC,EAXhPC,EAAkE,SAAUC,EAAUC,EAAOC,EAAMC,GACnG,GAAa,MAATD,IAAiBC,EAAG,MAAM,IAAIC,UAAU,iDAC5C,GAAqB,oBAAVH,EAAuBD,IAAaC,IAAUE,GAAKF,EAAMI,IAAIL,GAAW,MAAM,IAAII,UAAU,4EACvG,MAAgB,MAATF,EAAeC,EAAa,MAATD,EAAeC,EAAEG,KAAKN,GAAYG,EAAIA,EAAE9B,MAAQ4B,EAAMM,IAAIP,EACxF,EACIQ,EAAkE,SAAUR,EAAUC,EAAO5B,EAAO6B,EAAMC,GAC1G,GAAa,MAATD,EAAc,MAAM,IAAIE,UAAU,kCACtC,GAAa,MAATF,IAAiBC,EAAG,MAAM,IAAIC,UAAU,iDAC5C,GAAqB,oBAAVH,EAAuBD,IAAaC,IAAUE,GAAKF,EAAMI,IAAIL,GAAW,MAAM,IAAII,UAAU,2EACvG,MAAiB,MAATF,EAAeC,EAAEG,KAAKN,EAAU3B,GAAS8B,EAAIA,EAAE9B,MAAQA,EAAQ4B,EAAMQ,IAAIT,EAAU3B,GAASA,CACxG,EAIA,MAAMqC,EAASrB,EACTsB,EAAW,CAACC,EAA8BC,EAAuBC,GAChE,MAAMC,EACT,WAAIC,GACA,OAAOjB,EAAuBd,KAAMQ,EAAgD,IACxF,CACA,aAAIwB,GACA,OAAOlB,EAAuBd,KAAMS,EAAkD,KAAKwB,OAC/F,CACA,UAAIR,GACA,OAAOX,EAAuBd,KAAMU,EAA+C,KAAKuB,OAC5F,CACA,YAAIP,GACA,OAAOZ,EAAuBd,KAAMW,EAAiD,KAAKsB,OAC9F,CACA,SAAIC,GACA,OAAOpB,EAAuBd,KAAMY,EAA8C,IACtF,CACA,QAAIuB,GACA,OAAOrB,EAAuBd,KAAMa,EAA6C,IACrF,CACA,WAAAuB,EAAYL,QAAEA,EAAAC,UAASA,EAAAE,MAAWA,EAAAC,KAAOA,IACrC3B,EAA+CgB,IAAIxB,UAAM,GACzDS,EAAiDe,IAAIxB,UAAM,GAC3DU,EAA8Cc,IAAIxB,UAAM,GACxDW,EAAgDa,IAAIxB,UAAM,GAC1DY,EAA6CY,IAAIxB,UAAM,GACvDa,EAA4CW,IAAIxB,UAAM,gBACnC8B,GACfO,OAAOC,OAAOtC,MAElBuB,EAAuBvB,KAAMQ,EAAgDuB,EAAS,KACtFR,EAAuBvB,KAAMS,EAAkDuB,EAAW,KAC1FT,EAAuBvB,KAAMU,EAA+Ce,EAAQ,KACpFF,EAAuBvB,KAAMW,EAAiDe,EAAU,KACxFH,EAAuBvB,KAAMY,EAA8CsB,EAAO,KAClFX,EAAuBvB,KAAMa,EAA6CsB,EAAM,IACpF,EAEJ3B,EAAiD,IAAI+B,QAAW9B,MAAuD8B,QAAW7B,EAAgD,IAAI6B,QAAW5B,EAAkD,IAAI4B,QAAW3B,MAAmD2B,QAAW1B,EAA8C,IAAI0B,QCtDlX,IAAI5D,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,OAASG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,OAASG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAJzD,SAAeA,GAAS,OAAOA,aAAiBN,EAAIM,EAAQ,IAAIN,EAAE,SAAUG,GAAWA,EAAQG,EAAQ,EAAI,CAIzCO,CAAMF,EAAOL,OAAOQ,KAAKT,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUc,MAAMjB,EAASC,GAAc,KAAKS,OAClE,EACJ,EAWA,MAAMkD,UAAyBC,EAC3B,WAAAL,CAAYM,GACRC,QACA3C,KAAK4C,SAAW,eAChB5C,KAAK6C,cAAgB,CAAA,EACrB7C,KAAK8C,SAAW,KAChB9C,KAAK+C,QAAU,KACf/C,KAAKgD,WAAa,KAClBhD,KAAKiD,SAAW,KAChBjD,KAAKkD,cAAe,EACpBlD,KAAKmD,gBAAkB,KACvBnD,KAAKoD,iBAAmB,CAAA,EACxBpD,KAAKqD,aAAgBC,IACjB,IAAIC,EAAIC,EACR,OAAQF,EAAMG,MACV,IAAK,UAkBD,OAjBAzD,KAAK0D,wBACqB,QAArBH,EAAKD,EAAMK,YAAyB,IAAPJ,OAAgB,EAASA,EAAGvB,YAC1DhC,KAAKgD,WAAaM,EAAMK,KAAK3B,UAC7BhC,KAAKkD,cAAe,EAChBlD,KAAKmD,kBACLnD,KAAKmD,gBAAgBlE,UACrBe,KAAKmD,gBAAkB,MAE3BnD,KAAK4D,eAGD5D,KAAKmD,kBACLnD,KAAKmD,gBAAgBjE,SACrBc,KAAKmD,gBAAkB,MAE3BnD,KAAK6D,kBAIb,IAAK,aAMD,OALI7D,KAAKmD,kBACLnD,KAAKmD,gBAAgBjE,SACrBc,KAAKmD,gBAAkB,WAE3BnD,KAAK6D,gBAGT,IAAK,iBAUD,aAT0B,QAArBL,EAAKF,EAAMK,YAAyB,IAAPH,OAAgB,EAASA,EAAGxB,YAC1DhC,KAAKgD,WAAaM,EAAMK,KAAK3B,UAC7BhC,KAAK8D,KAAK,iBAAkB9D,KAAKgC,WACjChC,KAAK+D,uBAGL/D,KAAK8D,KAAK,sBAAkB,GAC5B9D,KAAKgE,0BAIb,QACI,SAIZhE,KAAKiE,cAAiBN,IACM,SAApBA,EAAKO,WACoB,eAArBP,EAAKQ,OAAOC,KACZpE,KAAKqE,gBAEqB,SAArBV,EAAKQ,OAAOC,MACjBpE,KAAK0D,kBAGgB,gBAApBC,EAAKO,YACVlE,KAAKsE,cAAcX,EAAKQ,SAGhCnE,KAAKuE,eAAkBjB,IACnB,IAAIC,EACJ,GAA4E,mCAAjD,QAArBA,EAAKD,EAAMK,YAAyB,IAAPJ,OAAgB,EAASA,EAAGiB,SAC3D,OAEJ,MAAMb,EAAOL,EAAMK,KAAKA,MAAQ,CAAA,EAChC,GAAkB,UAAdA,EAAKF,KACLzD,KAAKqD,aAAaM,EAAKL,YAC3B,GACuB,WAAdK,EAAKF,KACVzD,KAAKiE,cAAcN,QACvB,GACuB,aAAdA,EAAKF,MACNzD,KAAKoD,iBAAiBO,EAAKc,IAAK,CAChC,MAAMxF,QAAEA,EAAAC,OAASA,GAAWc,KAAKoD,iBAAiBO,EAAKc,WAChDzE,KAAKoD,iBAAiBO,EAAKc,IAC9Bd,EAAKxD,MACLjB,EAAOyE,EAAKxD,OAGZlB,EAAQ0E,EAAKlE,OAErB,GAGRO,KAAK0E,eAAiB,KACd1E,KAAK8C,WACL9C,KAAK8C,SAAS6B,SACd3E,KAAK8C,SAAW,OAGxB9C,KAAK4E,wBAA0B,KAC3B,MAAMC,EAAWC,SAASC,uBAAuB,2CACjD,IAAA,MAAWC,KAAWH,EACdG,EAAQC,eACRD,EAAQL,UAIpB3E,KAAKkF,eAAiB,KAClBlF,KAAK0E,iBACL1E,KAAK4E,0BACL,MAAMT,EAAS9B,OAAO8C,OAAO9C,OAAO8C,OAAO,CAAA,EAAInF,KAAK6C,eAAgB,CAAEuC,IAAI,EAAMC,EAAG,EAAGC,QAAStF,KAAK4C,UAAY,eAAgB2C,OAAQC,OAAOC,SAASF,QAAU,GAAIG,MAAOZ,SAASY,OAAS,KACzLC,EAActD,OAAOuD,KAAKzB,GAC3B0B,IAAKC,GAAQ,GAAGA,KAAOC,mBAAmB5B,EAAO2B,OACjDE,KAAK,KACJC,EAAY,GAAGzD,EAAiB0D,cAAcP,IACpD3F,KAAK8C,SAAWgC,SAASqB,cAAc,OACvCnG,KAAK8C,SAASsD,UAAY,0CAC1BpG,KAAK8C,SAASuD,UAAY,wBACjBJ,4MAETnB,SAASwB,KAAKC,YAAYvG,KAAK8C,UAC/B9C,KAAK+C,QAAU/C,KAAK8C,SAAS0D,cAAc,UAC3ChB,OAAOiB,iBAAiB,UAAWzG,KAAKuE,gBAAgB,IAE5DvE,KAAK0D,gBAAkB,KACf1D,KAAK+C,UACL/C,KAAK+C,QAAQ2D,MAAMC,IAAM,GACzB3G,KAAK+C,QAAQ2D,MAAME,MAAQ,GAC3B5G,KAAK+C,QAAQ2D,MAAMG,OAAS,MAC5B7G,KAAK+C,QAAQ2D,MAAMI,MAAQ,QAGnC9G,KAAKqE,cAAgB,KACbrE,KAAK+C,UACL/C,KAAK+C,QAAQ2D,MAAMC,IAAM,MACzB3G,KAAK+C,QAAQ2D,MAAMK,OAAS,MAC5B/G,KAAK+C,QAAQ2D,MAAMM,KAAO,MAC1BhH,KAAK+C,QAAQ2D,MAAME,MAAQ,MAC3B5G,KAAK+C,QAAQ2D,MAAMI,MAAQ,OAC3B9G,KAAK+C,QAAQ2D,MAAMG,OAAS,SAGpC7G,KAAKsE,cAAiBH,IACbnE,KAAK+C,UAGV/C,KAAK+C,QAAQ2D,MAAMC,IAAMM,SAAS9C,EAAOwC,KAAO,GAAGxC,EAAOwC,QAAU,GACpE3G,KAAK+C,QAAQ2D,MAAMK,OAASE,SAAS9C,EAAO4C,QAAU,GAAG5C,EAAO4C,WAAa,GAC7E/G,KAAK+C,QAAQ2D,MAAMM,KAAOC,SAAS9C,EAAO6C,MAAQ,GAAG7C,EAAO6C,SAAW,GACvEhH,KAAK+C,QAAQ2D,MAAME,MAAQK,SAAS9C,EAAOyC,OAAS,GAAGzC,EAAOyC,UAAY,GAC1E5G,KAAK+C,QAAQ2D,MAAMI,MAAQG,SAAS9C,EAAO2C,OACrC,GAAG3C,EAAO2C,UACV3C,EAAO2C,MACb9G,KAAK+C,QAAQ2D,MAAMG,OAASI,SAAS9C,EAAO0C,QACtC,GAAG1C,EAAO0C,WACV1C,EAAO0C,SAEjB7G,KAAKkH,mBAAsBvD,IACvB,IAAK3D,KAAKmH,YAAcnH,KAAKgC,UACzB,MAAM,IAAIoF,MAAM,wBAEpB,OAAO,IAAIpI,QAAQ,CAACC,EAASC,KACzB,IAAIqE,EAAIC,EACR,MAAM6D,EAAYC,IAClBtH,KAAKoD,iBAAiBiE,GAAa,CAAEpI,UAASC,UACuC,QAApFsE,EAA6B,QAAvBD,EAAKvD,KAAK+C,eAA4B,IAAPQ,OAAgB,EAASA,EAAGgE,qBAAkC,IAAP/D,GAAyBA,EAAGgE,YAAY,CACjIhD,QAAS,gCACTb,KAAMtB,OAAO8C,OAAO,CAAEV,GAAI4C,GAAa1D,IACxC,QAGX3D,KAAK4D,WAAa,KACd5D,KAAKkD,cAAe,EACpBlD,KAAK8D,KAAK,UAAW9D,KAAKgC,WAC1BhC,KAAK+D,sBAET/D,KAAK6D,cAAgB,KACjB7D,KAAKgD,WAAa,KAClBhD,KAAKkD,cAAe,EACpBsC,OAAOiC,oBAAoB,UAAWzH,KAAKuE,gBAAgB,GAC3DvE,KAAK0E,iBACL1E,KAAK8D,KAAK,cACV9D,KAAKgE,yBAEThE,KAAK+D,mBAAqB,KACtB,IAAK/D,KAAKgC,UACN,OAEJ,MAAMD,EAAU/B,KAAKgC,UAAU0F,WAC1B1H,KAAKiD,UAAYjD,KAAKiD,SAASlB,UAAYA,IAC5C/B,KAAKiD,SAAW,IAAInB,EAAsC,CACtDC,UACAC,UAAWhC,KAAKgC,UAAU2F,YAE9B3H,KAAK8D,KAAK,kBAAmB,CAAE8D,SAAU5H,KAAK6H,qBAGtD7H,KAAKgE,sBAAwB,KACrBhE,KAAKiD,WACLjD,KAAKiD,SAAW,KAChBjD,KAAK8D,KAAK,kBAAmB,CAAE8D,SAAU5H,KAAK6H,sBAGvC,OAAXnF,QAA8B,IAAXA,OAAoB,EAASA,EAAOoF,WACvD9H,KAAK4C,SAAsB,OAAXF,QAA8B,IAAXA,OAAoB,EAASA,EAAOoF,SAEvEtC,OAAOuC,yBACP/H,KAAK6C,cAAgBR,OAAO8C,OAAO9C,OAAO8C,OAAO,CAAA,EAAInF,KAAK6C,eAAgB2C,OAAOuC,0BAEtE,OAAXrF,QAA8B,IAAXA,OAAoB,EAASA,EAAOyB,UACvDnE,KAAK6C,cAAgBR,OAAO8C,OAAO9C,OAAO8C,OAAO,CAAA,EAAInF,KAAK6C,eAA2B,OAAXH,QAA8B,IAAXA,OAAoB,EAASA,EAAOyB,QAEzI,CACA,aAAInC,GACA,OAAOhC,KAAKgD,WAAa,IAAIgF,EAAUhI,KAAKgD,YAAc,IAC9D,CACA,mBAAIiF,GACA,OAAOjI,KAAKiD,QAChB,CACA,oBAAI4E,GACA,OAAO7H,KAAKiD,SAAW,CAACjD,KAAKiD,UAAY,EAC7C,CACA,eAAIiF,GACA,OAAOlI,KAAKkD,YAChB,CACA,aAAIiE,GACA,OAAOnH,KAAKkI,WAChB,CACA,eAAIC,GACA,OAAO,CACX,CACA,OAAAC,GACI,OAAOzJ,EAAUqB,UAAM,OAAQ,EAAQ,YAC/BA,KAAKmH,YAGTnH,KAAKkF,uBACC,IAAIlG,QAAQ,CAACC,EAASC,KACxBc,KAAKmD,gBAAkB,CAAElE,UAASC,YAE1C,EACJ,CACA,UAAAmJ,GACI,OAAO1J,EAAUqB,UAAM,OAAQ,EAAQ,kBAC7BA,KAAKkH,mBAAmB,CAC1BhH,OAAQ,eAEZF,KAAK6D,eACT,EACJ,CACA,eAAAyE,CAAgBjK,GACZ,IAAIkF,EACJ,OAAO5E,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,YAAcnH,KAAKgC,UACzB,MAAM,IAAIoF,MAAM,wBAEpB,IACI,MAAMmB,EAAwBhK,EAAqBF,GAC7CmK,QAAiBxI,KAAKkH,mBAAmB,CAC3ChH,OAAQ,oBACRiE,OAAQ,CACJ9F,YAAaoK,EAAKC,OAAOH,OAGzBlK,YAAasK,GAAsBH,EAC3C,OAAOpK,EAA4BC,GAAeuK,EAAYC,KAAKJ,EAAKK,OAAOH,IAAsBI,EAAqBC,YAAYP,EAAKK,OAAOH,GACtJ,OACOpJ,GACH,MAAM,IAAI6H,OAAmE,QAA3D7D,EAAW,OAANhE,QAAoB,IAANA,OAAe,EAASA,EAAEmI,gBAA6B,IAAPnE,OAAgB,EAASA,EAAGlC,KAAK9B,KAAO,6BACjI,CACJ,EACJ,CACA,mBAAA0J,CAAoBC,GAChB,IAAI3F,EACJ,OAAO5E,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,YAAcnH,KAAKgC,UACzB,MAAM,IAAIoF,MAAM,wBAEpB,IACI,MAAM+B,EAAyBD,EAAarD,IAAKxH,GAAgBE,EAAqBF,KAC9E6K,aAAcE,SAA6BpJ,KAAKkH,mBAAmB,CACvEhH,OAAQ,wBACRiE,OAAQ,CACJ+E,aAAcC,EAAuBtD,IAAKxH,GAAgBoK,EAAKC,OAAOrK,OAG9E,OAAO+K,EAAmBvD,IAAI,CAAC8C,EAAmBU,IACvCjL,EAA4B8K,EAAaG,IAAUT,EAAYC,KAAKJ,EAAKK,OAAOH,IAAsBI,EAAqBC,YAAYP,EAAKK,OAAOH,IAElK,OACOpJ,GACH,MAAM,IAAI6H,OAAmE,QAA3D7D,EAAW,OAANhE,QAAoB,IAANA,OAAe,EAASA,EAAEmI,gBAA6B,IAAPnE,OAAgB,EAASA,EAAGlC,KAAK9B,KAAO,8BACjI,CACJ,EACJ,CACA,sBAAA+J,CAAuBjL,EAAakL,GAChC,IAAIhG,EACJ,OAAO5E,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,YAAcnH,KAAKgC,UACzB,MAAM,IAAIoF,MAAM,wBAEpB,IACI,MAAMmB,EAAwBhK,EAAqBF,IAC7CmL,UAAEA,SAAoBxJ,KAAKkH,mBAAmB,CAChDhH,OAAQ,yBACRiE,OAAQ,CACJ9F,YAAaoK,EAAKC,OAAOH,GACzBgB,aAGR,OAAOC,CACX,OACOjK,GACH,MAAM,IAAI6H,OAAmE,QAA3D7D,EAAW,OAANhE,QAAoB,IAANA,OAAe,EAASA,EAAEmI,gBAA6B,IAAPnE,OAAgB,EAASA,EAAGlC,KAAK9B,KAAO,sCACjI,CACJ,EACJ,CACA,WAAAkK,CAAY9F,EAAM+F,EAAU,QACxB,IAAInG,EACJ,OAAO5E,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,YAAcnH,KAAKgC,UACzB,MAAM,IAAIoF,MAAM,wBAEpB,IACI,MAAMoC,UAAEA,SAAoBxJ,KAAKkH,mBAAmB,CAChDhH,OAAQ,cACRiE,OAAQ,CACJR,KAAM8E,EAAKC,OAAO/E,GAClB+F,aAGR,OAAOC,WAAWd,KAAKJ,EAAKK,OAAOU,GACvC,OACOjK,GACH,MAAM,IAAI6H,OAAmE,QAA3D7D,EAAW,OAANhE,QAAoB,IAANA,OAAe,EAASA,EAAEmI,gBAA6B,IAAPnE,OAAgB,EAASA,EAAGlC,KAAK9B,KAAO,yBACjI,CACJ,EACJ,CACA,IAAAqK,CAAKjG,EAAM+F,EAAU,QACjB,OAAO/K,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,aAAaA,KAAKyJ,YAAY9F,EAAM+F,EACxC,EACJ,CACA,kBAAOG,GACH,OAAOlL,EAAUqB,UAAM,OAAQ,EAAQ,YAEnC,eH9VL,WACH,OAAOrB,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IACI,MAAMD,EAAWyF,OAAOsE,SACxB,IAAK/J,EACD,OAAO,KAEX,GAAIA,EAASgK,WAAaC,MAAMC,QAAQlK,EAASgK,WAAY,CACzD,MAAMA,EAAYhK,EAASgK,UAC3B,IAAA,MAAWhK,KAAYgK,EACnB,SAAUjK,EAAgBC,GACtB,OAAOA,CAGnB,CACA,GAAIA,EAASmK,UAAYF,MAAMC,QAAQlK,EAASmK,UAAW,CACvD,MAAMH,EAAYhK,EAASmK,SAC3B,IAAA,MAAWnK,KAAYgK,EACnB,SAAUjK,EAAgBC,GACtB,OAAOA,CAGnB,CACA,aAAUD,EAAgBC,IACfA,EAEJ,IACX,OACOI,GAEH,OADAgK,QAAQhK,MAAMA,GACP,IACX,CACJ,EACJ,CG4TmCiK,GAE3B,EACJ,CACA,8BAAAC,IAAkCC,GAC9B,OAAO3L,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,UACN,MAAM,IAAIC,MAAM,iBACpB,MAAMmD,EAAU,GAChB,GAAsB,IAAlBD,EAAOE,OAAc,CACrB,MAAMnM,YAAEA,EAAAoM,QAAaA,EAAAnK,MAASA,UAAOiJ,GAAYe,EAAO,IAClDI,eAAEA,EAAAC,oBAAgBA,EAAAC,cAAqBA,aAAeC,GAAetB,GAAW,CAAA,EACtF,GAAIkB,IAAYzK,KAAKiD,SACjB,MAAM,IAAImE,MAAM,mBACpB,IAAK/G,EAAcC,GACf,MAAM,IAAI8G,MAAM,iBACpB,MAAMoC,QAAkBxJ,KAAKsJ,uBAAuBP,EAAqBC,YAAY3K,GAAc,CAC/FsM,sBACAD,iBACAG,aACAD,kBAEJL,EAAQO,KAAK,CAAEtB,UAAWf,EAAKK,OAAOU,IAC1C,MAAA,GACSc,EAAOE,OAAS,EACrB,IAAA,MAAWO,KAAST,EAChBC,EAAQO,cAAe9K,KAAKqK,+BAA+BU,IAGnE,OAAOR,CACX,EACJ,CACA,uBAAAS,IAA2BV,GACvB,OAAO3L,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,UACN,MAAM,IAAIC,MAAM,iBACpB,MAAMmD,EAAU,GAChB,GAAsB,IAAlBD,EAAOE,OAAc,CACrB,MAAMnM,YAAEA,EAAAoM,QAAaA,EAAAnK,MAASA,GAAUgK,EAAO,GAC/C,GAAIG,IAAYzK,KAAKiD,SACjB,MAAM,IAAImE,MAAM,mBACpB,GAAI9G,IAAUD,EAAcC,GACxB,MAAM,IAAI8G,MAAM,iBACpB,MAAMuB,QAA0B3I,KAAKsI,gBAAgBS,EAAqBC,YAAY3K,IACtFkM,EAAQO,KAAK,CAAEnC,kBAAmBA,EAAkBnK,aACxD,MAAA,GACS8L,EAAOE,OAAS,EAAG,CACxB,IAAIlK,EACJ,IAAA,MAAWyK,KAAST,EAAQ,CACxB,GAAIS,EAAMN,UAAYzK,KAAKiD,SACvB,MAAM,IAAImE,MAAM,mBACpB,GAAI2D,EAAMzK,MAAO,CACb,IAAKD,EAAc0K,EAAMzK,OACrB,MAAM,IAAI8G,MAAM,iBACpB,GAAI9G,GACA,GAAIyK,EAAMzK,QAAUA,EAChB,MAAM,IAAI8G,MAAM,0BAGpB9G,EAAQyK,EAAMzK,KAEtB,CACJ,CACA,MAAM4I,EAAeoB,EAAOzE,IAAI,EAAGxH,iBAAkB0K,EAAqBC,YAAY3K,IAChF+K,QAA2BpJ,KAAKiJ,oBAAoBC,GAC1DqB,EAAQO,QAAQ1B,EAAmBvD,IAAK8C,IAAA,CACpCA,kBAAmBA,EAAkBnK,eAE7C,CACA,OAAO+L,CACX,EACJ,CACA,mBAAAU,IAAuBX,GACnB,OAAO3L,EAAUqB,UAAM,OAAQ,EAAQ,YACnC,IAAKA,KAAKmH,UACN,MAAM,IAAIC,MAAM,iBACpB,MAAMmD,EAAU,GAChB,GAAsB,IAAlBD,EAAOE,OAAc,CACrB,MAAMU,QAAEA,EAAAT,QAASA,GAAYH,EAAO,GACpC,GAAIG,IAAYzK,KAAKiD,SACjB,MAAM,IAAImE,MAAM,mBACpB,MAAMoC,QAAkBxJ,KAAKyJ,YAAYyB,GACzCX,EAAQO,KAAK,CAAEK,cAAeD,EAAS1B,aAC3C,MAAA,GACSc,EAAOE,OAAS,EACrB,IAAA,MAAWO,KAAST,EAChBC,EAAQO,cAAe9K,KAAKiL,oBAAoBF,IAGxD,OAAOR,CACX,EACJ,EAEJ/H,EAAiB0D,WAAa","x_google_ignoreList":[0,1,2,3,4]}